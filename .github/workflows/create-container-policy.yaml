name: Create Vision One Container Security Policy

on:
  workflow_dispatch:
    inputs:
      RULESET_NAME:
        description: 'Ruleset Name'
        required: true
        default: 'DemoLogOnlyRuleset'
      POLICY_NAME:
        description: 'Policy Name'
        required: true
        default: 'DemoLogOnlyPolicy'

env:
  API_URL: https://api.xdr.trendmicro.com/v3.0/containerSecurity

jobs:
  check-policy:
    name: Check if Policy Exists
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.set-output.outputs.exists }}
    steps:
      - uses: actions/checkout@v3
      - name: Check Policy
        run: bash trendmicro/scripts/check_policy_job.sh
        env:
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          POLICY_NAME: ${{ github.event.inputs.POLICY_NAME }}
          API_URL: ${{ env.API_URL }}
      - name: Set output
        id: set-output
        run: echo "exists=${{ env.POLICY_EXISTS }}" >> $GITHUB_OUTPUT

  check-ruleset:
    name: Check if Ruleset Exists
    runs-on: ubuntu-latest
    needs: check-policy
    if: needs.check-policy.outputs.exists == 'false'
    outputs:
      exists: ${{ steps.set-output.outputs.exists }}
      ruleset_id: ${{ steps.set-output.outputs.ruleset_id }}
    steps:
      - uses: actions/checkout@v3
      - name: Check Ruleset
        run: bash trendmicro/scripts/check_ruleset_job.sh
        env:
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          RULESET_NAME: ${{ github.event.inputs.RULESET_NAME }}
          API_URL: ${{ env.API_URL }}
      - name: Set output
        id: set-output
        run: |
          echo "exists=${{ env.RULESET_EXISTS }}" >> $GITHUB_OUTPUT
          echo "ruleset_id=${{ env.RULESET_ID }}" >> $GITHUB_OUTPUT

  create-ruleset:
    name: Create Ruleset
    runs-on: ubuntu-latest
    needs: check-ruleset
    if: needs.check-ruleset.outputs.exists == 'false'
    outputs:
      ruleset_id: ${{ steps.set-output.outputs.ruleset_id }}
    steps:
      - uses: actions/checkout@v3
      - name: Create Ruleset
        run: bash trendmicro/scripts/create_ruleset_job.sh
        env:
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          RULESET_NAME: ${{ github.event.inputs.RULESET_NAME }}
          API_URL: ${{ env.API_URL }}
      - name: Set output
        id: set-output
        run: echo "ruleset_id=${{ env.RULESET_ID }}" >> $GITHUB_OUTPUT

  create-policy:
    name: Create Policy
    runs-on: ubuntu-latest
    needs: [check-ruleset, create-ruleset]
    if: needs.check-policy.outputs.exists == 'false'
    steps:
      - uses: actions/checkout@v3
      - name: Create Policy
        run: bash trendmicro/scripts/create_policy_job.sh
        env:
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          POLICY_NAME: ${{ github.event.inputs.POLICY_NAME }}
          RULESET_ID: ${{ needs.check-ruleset.outputs.ruleset_id || needs.create-ruleset.outputs.ruleset_id }}
          API_URL: ${{ env.API_URL }}

  cleanup-ruleset:
    name: Delete Ruleset on Policy Creation Failure
    runs-on: ubuntu-latest
    needs: [create-policy, create-ruleset]
    if: failure() && needs.create-ruleset.result == 'success'
    steps:
      - uses: actions/checkout@v3
      - name: Delete Ruleset
        run: bash trendmicro/scripts/delete_ruleset_job.sh
        env:
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          RULESET_ID: ${{ needs.create-ruleset.outputs.ruleset_id }}
          API_URL: ${{ env.API_URL }}
