name: Create Vision One Container Security Policy

on:
  workflow_dispatch:
    inputs:
      ruleset_name:
        description: 'Ruleset Name'
        required: false
        default: 'DemoLogOnlyRuleset'
      policy_name:
        description: 'Policy Name'
        required: false
        default: 'DemoLogOnlyPolicy'

env:
  API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity
  API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
  RULESET_NAME: ${{ github.event.inputs.ruleset_name }}
  POLICY_NAME: ${{ github.event.inputs.policy_name }}

jobs:
  check-policy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Check if Policy Exists
        id: check-policy
        run: |
          set +e
          python trendmicro/scripts/check_policy.py
          status=$?
          echo "Script exited with code $status"
          if [ "$status" -eq 1 ]; then
            echo "❌ Policy already exists. Aborting."
            exit 1
          elif [ "$status" -eq 2 ]; then
            echo "✅ Policy does not exist. Proceeding."
            exit 0
          else
            echo "🔥 Unknown error occurred while checking policy."
            exit $status
          fi

  check-ruleset:
    runs-on: ubuntu-latest
    needs: check-policy
    outputs:
      exists: ${{ steps.ruleset-check.outputs.exists }}
      ruleset_id: ${{ steps.ruleset-check.outputs.ruleset_id }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Check if Ruleset Exists
        id: ruleset-check
        run: |
          set +e
          output=$(python trendmicro/scripts/check_ruleset.py)
          status=$?
          echo "$output"
          echo "Script exited with code $status"
          if [ "$status" -eq 0 ]; then
            id=$(echo "$output" | awk -F'id=' '{print $2}')
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "ruleset_id=$id" >> $GITHUB_OUTPUT
          elif [ "$status" -eq 2 ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            echo "🔥 Unknown error occurred while checking ruleset."
            exit $status
          fi

  create-ruleset:
    runs-on: ubuntu-latest
    needs: check-ruleset
    if: needs.check-ruleset.outputs.exists == 'false'
    outputs:
      ruleset_id: ${{ steps.ruleset-create.outputs.ruleset_id }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Create Ruleset
        id: ruleset-create
        run: |
          set +e
          output=$(python trendmicro/scripts/create_ruleset.py 2>&1)
          status=$?
          echo "$output"
          echo "Script exited with code $status"
          if [ "$status" -eq 0 ]; then
            id=$(echo "$output" | grep 'ruleset_id=' | awk -F'=' '{print $2}')
            echo "ruleset_id=$id" >> $GITHUB_OUTPUT
          else
            echo "🔥 Failed to create ruleset."
            exit $status
          fi

  create-policy:
    runs-on: ubuntu-latest
    needs: check-ruleset  # only depends on check-ruleset now
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Determine Ruleset ID
        id: ruleset-id
        run: |
          id="${{ needs.check-ruleset.outputs.ruleset_id }}"
          echo "RULESET_ID=$id" >> $GITHUB_ENV

      - name: Create Policy
        run: |
          python trendmicro/scripts/create_policy.py

  cleanup-ruleset:
    runs-on: ubuntu-latest
    needs: [create-policy, create-ruleset]
    if: failure() && needs.create-ruleset.result == 'success'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Delete Ruleset
        run: |
          python trendmicro/scripts/delete_ruleset.py
