name: Create Vision One Container Security Policy

on:
  workflow_dispatch:
    inputs:
      RULESET_NAME:
        description: 'Ruleset Name'
        required: false
        default: 'DemoLogOnlyRuleset'
      POLICY_NAME:
        description: 'Policy Name'
        required: false
        default: 'DemoLogOnlyPolicy'

jobs:
  check-policy:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
    steps:
      - uses: actions/checkout@v3

      - name: Check if policy exists
        id: check
        run: bash trendmicro/scripts/check_policy_job.sh
        env:
          API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          POLICY_NAME: ${{ github.event.inputs.POLICY_NAME }}

  check-ruleset:
    needs: check-policy
    if: needs.check-policy.outputs.exists == 'false'
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
      ruleset_id: ${{ steps.check.outputs.ruleset_id }}
    steps:
      - uses: actions/checkout@v3

      - name: Check if ruleset exists
        id: check
        run: bash trendmicro/scripts/check_ruleset_job.sh
        env:
          API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          RULESET_NAME: ${{ github.event.inputs.RULESET_NAME }}

  create-ruleset:
    needs: check-ruleset
    if: needs.check-ruleset.outputs.exists == 'false'
    runs-on: ubuntu-latest
    outputs:
      ruleset_id: ${{ steps.create.outputs.ruleset_id }}
    steps:
      - uses: actions/checkout@v3

      - name: Create ruleset
        id: create
        run: bash trendmicro/scripts/create_ruleset_job.sh
        env:
          API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          RULESET_NAME: ${{ github.event.inputs.RULESET_NAME }}

  create-policy:
    needs: [check-policy, check-ruleset, create-ruleset]
    if: needs.check-policy.outputs.exists == 'false'
    runs-on: ubuntu-latest
    outputs:
      policy_id: ${{ steps.create.outputs.policy_id }}
    steps:
      - uses: actions/checkout@v3

      - name: Create policy
        id: create
        run: bash trendmicro/scripts/create_policy_job.sh
        env:
          API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          POLICY_NAME: ${{ github.event.inputs.POLICY_NAME }}
          RULESET_ID: >-
            ${{ needs.check-ruleset.outputs.ruleset_id != '' && needs.check-ruleset.outputs.ruleset_id || needs.create-ruleset.outputs.ruleset_id }}

  cleanup-ruleset:
    needs: create-policy
    if: failure() && needs.check-ruleset.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Delete ruleset if policy creation failed
        run: bash trendmicro/scripts/delete_ruleset_job.sh
        env:
          API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          RULESET_ID: ${{ needs.create-ruleset.outputs.ruleset_id }}
