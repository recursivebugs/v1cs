name: Create Vision One Container Security Policy

on:
  workflow_dispatch:
    inputs:
      RULESET_NAME:
        description: 'Ruleset Name'
        required: true
        default: 'DemoLogOnlyRuleset'
      POLICY_NAME:
        description: 'Policy Name'
        required: true
        default: 'DemoLogOnlyPolicy'

env:
  API_URL: https://api.xdr.trendmicro.com/v3.0/containerSecurity
  API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}

jobs:
  check-policy:
    name: Check if Policy Exists
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.set-output.outputs.exists }}
    steps:
    - uses: actions/checkout@v3
    - name: Check Policy
      id: set-output
      run: |
        bash trendmicro/scripts/check_policy_job.sh
        echo "exists=$EXISTS" >> $GITHUB_OUTPUT
    - name: Summary
      run: |
        echo "### Check Policy Job" >> $GITHUB_STEP_SUMMARY
        echo "Policy Name: ${{ github.event.inputs.POLICY_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "Exists: ${{ steps.set-output.outputs.exists }}" >> $GITHUB_STEP_SUMMARY

  check-ruleset:
    name: Check if Ruleset Exists
    runs-on: ubuntu-latest
    needs: check-policy
    if: needs.check-policy.outputs.exists == 'false'
    outputs:
      exists: ${{ steps.set-output.outputs.exists }}
      ruleset_id: ${{ steps.set-output.outputs.ruleset_id }}
    steps:
    - uses: actions/checkout@v3
    - name: Check Ruleset
      id: set-output
      run: |
        bash trendmicro/scripts/check_ruleset_job.sh
        echo "exists=$EXISTS" >> $GITHUB_OUTPUT
        echo "ruleset_id=$RULESET_ID" >> $GITHUB_OUTPUT
    - name: Summary
      run: |
        echo "### Check Ruleset Job" >> $GITHUB_STEP_SUMMARY
        echo "Ruleset Name: ${{ github.event.inputs.RULESET_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "Exists: ${{ steps.set-output.outputs.exists }}" >> $GITHUB_STEP_SUMMARY
        echo "Ruleset ID: ${{ steps.set-output.outputs.ruleset_id }}" >> $GITHUB_STEP_SUMMARY

  create-ruleset:
    name: Create Ruleset
    runs-on: ubuntu-latest
    needs: check-ruleset
    if: needs.check-ruleset.outputs.exists == 'false'
    outputs:
      ruleset_id: ${{ steps.set-output.outputs.ruleset_id }}
    steps:
    - uses: actions/checkout@v3
    - name: Create Ruleset
      id: set-output
      run: |
        bash trendmicro/scripts/create_ruleset_job.sh
        echo "ruleset_id=$RULESET_ID" >> $GITHUB_OUTPUT
    - name: Summary
      run: |
        echo "### Create Ruleset Job" >> $GITHUB_STEP_SUMMARY
        echo "Ruleset Name: ${{ github.event.inputs.RULESET_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "Ruleset ID: ${{ steps.set-output.outputs.ruleset_id }}" >> $GITHUB_STEP_SUMMARY

  create-policy:
    name: Create Policy
    runs-on: ubuntu-latest
    needs: [check-ruleset, create-ruleset]
    env:
      RULESET_ID: ${{ needs.create-ruleset.outputs.ruleset_id || needs.check-ruleset.outputs.ruleset_id }}
    outputs:
      create_failed: ${{ steps.set-output.outputs.create_failed }}
    steps:
    - uses: actions/checkout@v3
    - name: Create Policy
      id: set-output
      run: |
        bash trendmicro/scripts/create_policy_job.sh || echo "CREATE_FAILED=true" >> $GITHUB_ENV
    - name: Summary
      run: |
        echo "### Create Policy Job" >> $GITHUB_STEP_SUMMARY
        echo "Policy Name: ${{ github.event.inputs.POLICY_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "Ruleset ID: ${{ env.RULESET_ID }}" >> $GITHUB_STEP_SUMMARY

  delete-ruleset:
    name: Delete Ruleset
    runs-on: ubuntu-latest
    needs: [create-policy, create-ruleset]
    if: ${{ env.CREATE_FAILED == 'true' && needs.create-ruleset.result == 'success' }}
    steps:
    - uses: actions/checkout@v3
    - name: Delete Ruleset
      run: |
        bash trendmicro/scripts/delete_ruleset_job.sh
