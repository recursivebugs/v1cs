# .github/workflows/create_v1cs_policy.yml
name: Create Vision One Container Security Policy

on:
  workflow_dispatch:
    inputs:
      RULESET_NAME:
        description: 'Ruleset Name'
        required: true
        default: 'DemoLogOnlyRuleset'
      POLICY_NAME:
        description: 'Policy Name'
        required: true
        default: 'DemoLogOnlyPolicy'

env:
  API_URL: https://api.xdr.trendmicro.com/v3.0/containerSecurity
  API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}

jobs:
  check-policy:
    name: Check if Policy Exists
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.set-exists.outputs.exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run check_policy_job.sh
        id: run-check
        run: |
          bash trendmicro/scripts/check_policy_job.sh

      - name: Set Output
        id: set-exists
        run: echo "exists=$exists" >> $GITHUB_OUTPUT

  check-ruleset:
    name: Check if Ruleset Exists
    runs-on: ubuntu-latest
    needs: check-policy
    if: needs.check-policy.outputs.exists == 'false'
    outputs:
      exists: ${{ steps.set-exists.outputs.exists }}
      ruleset_id: ${{ steps.set-exists.outputs.ruleset_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run check_ruleset_job.sh
        id: run-check
        run: |
          bash trendmicro/scripts/check_ruleset_job.sh

      - name: Set Output
        id: set-exists
        run: |
          echo "exists=$exists" >> $GITHUB_OUTPUT
          echo "ruleset_id=$ruleset_id" >> $GITHUB_OUTPUT

  create-ruleset:
    name: Create Ruleset (if missing)
    runs-on: ubuntu-latest
    needs: check-ruleset
    if: needs.check-ruleset.outputs.exists == 'false'
    outputs:
      ruleset_id: ${{ steps.set-id.outputs.ruleset_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run create_ruleset_job.sh
        id: run-create
        run: |
          bash trendmicro/scripts/create_ruleset_job.sh

      - name: Set Ruleset ID
        id: set-id
        run: echo "ruleset_id=$ruleset_id" >> $GITHUB_OUTPUT

  create-policy:
    name: Create Policy
    runs-on: ubuntu-latest
    needs: [check-ruleset, create-ruleset]
    if: needs.check-policy.outputs.exists == 'false'
    outputs:
      policy_id: ${{ steps.set-id.outputs.policy_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run create_policy_job.sh
        id: run-create
        env:
          RULESET_ID: ${{ needs.check-ruleset.outputs.ruleset_id || needs.create-ruleset.outputs.ruleset_id }}
        run: |
          bash trendmicro/scripts/create_policy_job.sh || echo "CREATE_FAILED=true" >> $GITHUB_ENV

      - name: Set Policy ID
        id: set-id
        run: echo "policy_id=$policy_id" >> $GITHUB_OUTPUT

  cleanup-ruleset:
    name: Cleanup Ruleset (if policy creation failed)
    runs-on: ubuntu-latest
    needs: create-policy
    if: env.CREATE_FAILED == 'true' && needs.create-ruleset.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Delete ruleset
        run: |
          bash trendmicro/scripts/delete_ruleset.sh ${{ needs.create-ruleset.outputs.ruleset_id }}

  notify-user:
    name: Notify Policy Already Exists
    runs-on: ubuntu-latest
    needs: check-policy
    if: needs.check-policy.outputs.exists == 'true'
    steps:
      - name: Print notification
        run: echo "ðŸš« A policy with the same name already exists. Please choose a different name."
