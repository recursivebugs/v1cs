name: 2) Create V1 Container Security Policy
on:
  workflow_dispatch:
    inputs:
      RULESET_NAME:
        description: 'Ruleset Name'
        required: true
        default: 'DemoLogOnlyRuleset'
      POLICY_NAME:
        description: 'Policy Name'
        required: true
        default: 'DemoLogOnlyPolicy'
env:
  API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity

jobs:
  check-policy:
    name: Check if Policy Exists
    runs-on: ubuntu-latest
    outputs:
      policy_exists: ${{ steps.check-policy.outputs.exists }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install requests
      
      - name: Check Policy
        id: check-policy
        run: |
          echo "Checking if policy '${{ github.event.inputs.POLICY_NAME }}' exists..."
          output=$(python trendmicro/scripts/check_policy.py || echo "Check policy failed with exit code $?")
          echo "$output"
          if echo "$output" | grep -q "already exists"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "::error::Policy already exists. Aborting workflow."
            exit 1
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Policy does not exist. Proceeding..."
          fi
        env:
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          POLICY_NAME: ${{ github.event.inputs.POLICY_NAME }}
          API_URL: ${{ env.API_URL }}
          
      - name: Job Summary
        run: |
          echo "## Policy Check Results" >> $GITHUB_STEP_SUMMARY
          echo "* **Policy Name**: ${{ github.event.inputs.POLICY_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Exists**: No" >> $GITHUB_STEP_SUMMARY
          echo "* **Status**: Ready to proceed with creation" >> $GITHUB_STEP_SUMMARY

  check-ruleset:
    name: Check if Ruleset Exists
    runs-on: ubuntu-latest
    needs: check-policy
    outputs:
      ruleset_exists: ${{ steps.check-ruleset.outputs.exists }}
      ruleset_id: ${{ steps.check-ruleset.outputs.ruleset_id }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install requests
      
      - name: Check Ruleset
        id: check-ruleset
        run: |
          echo "Checking if ruleset '${{ github.event.inputs.RULESET_NAME }}' exists..."
          output=$(python trendmicro/scripts/check_ruleset.py || echo "Check ruleset failed with exit code $?")
          echo "$output"
          if echo "$output" | grep -q "exists=true"; then
            ruleset_id=$(echo "$output" | grep -o "id=.*" | cut -d= -f2)
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "ruleset_id=$ruleset_id" >> $GITHUB_OUTPUT
            echo "✅ Ruleset exists with ID: $ruleset_id"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "❓ Ruleset does not exist. Will create it in next job."
          fi
        env:
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          RULESET_NAME: ${{ github.event.inputs.RULESET_NAME }}
          API_URL: ${{ env.API_URL }}
      
      - name: Job Summary
        run: |
          echo "## Ruleset Check Results" >> $GITHUB_STEP_SUMMARY
          echo "* **Ruleset Name**: ${{ github.event.inputs.RULESET_NAME }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.check-ruleset.outputs.exists }}" == "true" ]]; then
            echo "* **Exists**: Yes" >> $GITHUB_STEP_SUMMARY
            echo "* **Ruleset ID**: ${{ steps.check-ruleset.outputs.ruleset_id }}" >> $GITHUB_STEP_SUMMARY
            echo "* **Status**: Using existing ruleset" >> $GITHUB_STEP_SUMMARY
          else
            echo "* **Exists**: No" >> $GITHUB_STEP_SUMMARY
            echo "* **Status**: Will create new ruleset" >> $GITHUB_STEP_SUMMARY
          fi

  create-ruleset:
    name: Create Ruleset
    runs-on: ubuntu-latest
    needs: [check-policy, check-ruleset]
    if: needs.check-ruleset.outputs.ruleset_exists == 'false'
    outputs:
      ruleset_id: ${{ steps.create-ruleset.outputs.ruleset_id }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install requests
      
      - name: Create Ruleset
        id: create-ruleset
        run: |
          echo "Creating ruleset '${{ github.event.inputs.RULESET_NAME }}'..."
          output=$(python trendmicro/scripts/create_ruleset.py || echo "Create ruleset failed with exit code $?")
          echo "$output"
          if echo "$output" | grep -q "id="; then
            ruleset_id=$(echo "$output" | grep -o "id=.*" | cut -d= -f2)
            echo "ruleset_id=$ruleset_id" >> $GITHUB_OUTPUT
            echo "✅ Successfully created ruleset with ID: $ruleset_id"
          else
            echo "❌ Failed to create ruleset"
            exit 1
          fi
        env:
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          RULESET_NAME: ${{ github.event.inputs.RULESET_NAME }}
          API_URL: ${{ env.API_URL }}
      
      - name: Save ruleset file as artifact
        run: |
          # Create a directory for artifacts
          mkdir -p artifacts
          
          # Copy the ruleset JSON file with actual name
          cp trendmicro/runtimeruleset.json "artifacts/${{ github.event.inputs.RULESET_NAME }}.json"
          
          # Add the ruleset ID to a separate file for reference
          echo "${{ steps.create-ruleset.outputs.ruleset_id }}" > "artifacts/${{ github.event.inputs.RULESET_NAME }}.id"
          
          # Also create a file that combines the ruleset and its ID for easier reference
          echo "Ruleset ID: ${{ steps.create-ruleset.outputs.ruleset_id }}" > "artifacts/${{ github.event.inputs.RULESET_NAME }}_info.txt"
          echo "" >> "artifacts/${{ github.event.inputs.RULESET_NAME }}_info.txt"
          echo "Ruleset JSON:" >> "artifacts/${{ github.event.inputs.RULESET_NAME }}_info.txt"
          cat trendmicro/runtimeruleset.json >> "artifacts/${{ github.event.inputs.RULESET_NAME }}_info.txt"
          
          # List the files to verify they exist
          ls -la artifacts/
      
      - name: Upload ruleset artifact
        uses: actions/upload-artifact@v4
        with:
          name: ruleset-files
          path: artifacts/
          retention-days: 7
      
      - name: Job Summary
        run: |
          echo "## Ruleset Creation Results" >> $GITHUB_STEP_SUMMARY
          echo "* **Ruleset Name**: ${{ github.event.inputs.RULESET_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Ruleset ID**: ${{ steps.create-ruleset.outputs.ruleset_id }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Status**: Successfully created" >> $GITHUB_STEP_SUMMARY
          echo "* **Artifact**: The ruleset file has been saved as a workflow artifact" >> $GITHUB_STEP_SUMMARY

  create-policy:
    name: Create Policy
    runs-on: ubuntu-latest
    needs: [check-policy, check-ruleset, create-ruleset]
    # Always run if policy doesn't exist, regardless of whether ruleset was created or existed
    if: always() && needs.check-policy.result == 'success'
    steps:
      - uses: actions/checkout@v3
      
      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install requests
      
      - name: Determine Ruleset ID
        id: get-ruleset-id
        run: |
          if [[ "${{ needs.check-ruleset.outputs.ruleset_exists }}" == "true" ]]; then
            echo "ruleset_id=${{ needs.check-ruleset.outputs.ruleset_id }}" >> $GITHUB_ENV
            echo "Using existing ruleset ID: ${{ needs.check-ruleset.outputs.ruleset_id }}"
          elif [[ "${{ needs.create-ruleset.result }}" == "success" ]]; then
            echo "ruleset_id=${{ needs.create-ruleset.outputs.ruleset_id }}" >> $GITHUB_ENV
            echo "Using newly created ruleset ID: ${{ needs.create-ruleset.outputs.ruleset_id }}"
          else
            echo "::error::No valid ruleset ID available. Cannot proceed with policy creation."
            exit 1
          fi
      
      - name: Prepare policy file
        id: prepare-policy
        run: |
          echo "Preparing policy file with ruleset ID: ${{ env.ruleset_id }}"
          mkdir -p artifacts
          
          # Check if ruleset ID exists
          if [[ -z "${{ env.ruleset_id }}" ]]; then
            echo "::error::Ruleset ID is empty. Cannot proceed."
            exit 1
          fi
          
          # Create a temporary policy file with the updated ruleset ID
          cp trendmicro/policy.json policy_tmp.json
          
          # Use jq to update the ruleset ID in the policy file
          cat policy_tmp.json | jq --arg rid "${{ env.ruleset_id }}" '.runtime.rulesetids[0].id = $rid' > "artifacts/${{ github.event.inputs.POLICY_NAME }}.json"
          
          # If the jq command fails or produces an invalid file, try a simpler approach
          if [ $? -ne 0 ] || [ ! -s "artifacts/${{ github.event.inputs.POLICY_NAME }}.json" ]; then
            echo "Warning: jq command failed, trying alternative approach with sed"
            cat trendmicro/policy.json | sed -e 's/"id": "DemoLogOnlyRuleset-[^"]*"/"id": "${{ env.ruleset_id }}"/' > "artifacts/${{ github.event.inputs.POLICY_NAME }}.json"
          fi
          
          # Display the updated policy content
          echo "Updated policy file content:"
          cat "artifacts/${{ github.event.inputs.POLICY_NAME }}.json"
          
          # Also create a copy for the build process
          cp "artifacts/${{ github.event.inputs.POLICY_NAME }}.json" trendmicro/policy_updated.json
          
          echo "POLICY_FILE=trendmicro/policy_updated.json" >> $GITHUB_ENV
          
          # List the files to verify they exist
          echo "Files in artifacts directory:"
          ls -la artifacts/
      
      - name: Create Policy
        id: create-policy
        run: |
          echo "Creating policy '${{ github.event.inputs.POLICY_NAME }}' with ruleset ID: ${{ env.ruleset_id }}"
          output=$(python trendmicro/scripts/create_policy.py || echo "Create policy failed with exit code $?")
          echo "$output"
          if echo "$output" | grep -q "created successfully"; then
            echo "✅ Policy created successfully"
            if echo "$output" | grep -q "policy_id="; then
              policy_id=$(echo "$output" | grep -o "policy_id=.*" | cut -d= -f2)
              echo "policy_id=$policy_id" >> $GITHUB_OUTPUT
              
              # Save policy ID to a file
              echo "$policy_id" > "artifacts/${{ github.event.inputs.POLICY_NAME }}.id"
              
              # Create an info file that combines the policy and its ID
              echo "Policy ID: $policy_id" > "artifacts/${{ github.event.inputs.POLICY_NAME }}_info.txt"
              echo "Ruleset ID: ${{ env.ruleset_id }}" >> "artifacts/${{ github.event.inputs.POLICY_NAME }}_info.txt"
              echo "" >> "artifacts/${{ github.event.inputs.POLICY_NAME }}_info.txt"
              echo "Policy JSON:" >> "artifacts/${{ github.event.inputs.POLICY_NAME }}_info.txt"
              cat "artifacts/${{ github.event.inputs.POLICY_NAME }}.json" >> "artifacts/${{ github.event.inputs.POLICY_NAME }}_info.txt"
              
              # List files to verify they exist
              ls -la artifacts/
            fi
          else
            echo "❌ Failed to create policy"
            exit 1
          fi
        env:
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          POLICY_NAME: ${{ github.event.inputs.POLICY_NAME }}
          RULESET_NAME: ${{ github.event.inputs.RULESET_NAME }}
          RULESET_ID: ${{ env.ruleset_id }}
          API_URL: ${{ env.API_URL }}
          POLICY_FILE: ${{ env.POLICY_FILE }}
      
      - name: Upload policy artifact
        uses: actions/upload-artifact@v4
        with:
          name: policy-files
          path: artifacts/
          retention-days: 7
      
      - name: Job Summary
        run: |
          echo "## Policy Creation Results" >> $GITHUB_STEP_SUMMARY
          echo "* **Policy Name**: ${{ github.event.inputs.POLICY_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Ruleset ID Used**: ${{ env.ruleset_id }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ -n "${{ steps.create-policy.outputs.policy_id }}" ]]; then
            echo "* **Policy ID**: ${{ steps.create-policy.outputs.policy_id }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "* **Status**: Successfully created" >> $GITHUB_STEP_SUMMARY
          echo "* **Artifact**: The policy file has been saved as a workflow artifact" >> $GITHUB_STEP_SUMMARY

  cleanup-ruleset:
    name: Delete Ruleset on Policy Creation Failure
    runs-on: ubuntu-latest
    needs: [create-policy, create-ruleset]
    if: failure() && needs.create-ruleset.result == 'success'
    steps:
      - uses: actions/checkout@v3
      
      - name: Install required packages
        run: pip install requests
      
      - name: Delete Ruleset
        run: |
          echo "Cleaning up ruleset ID: ${{ needs.create-ruleset.outputs.ruleset_id }}"
          python trendmicro/scripts/delete_ruleset.py
        env:
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          RULESET_ID: ${{ needs.create-ruleset.outputs.ruleset_id }}
          API_URL: ${{ env.API_URL }}
      
      - name: Job Summary
        run: |
          echo "## Cleanup Results" >> $GITHUB_STEP_SUMMARY
          echo "* **Ruleset ID**: ${{ needs.create-ruleset.outputs.ruleset_id }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Status**: Ruleset deleted due to policy creation failure" >> $GITHUB_STEP_SUMMARY
          echo "* **Reason**: The policy creation job failed, so the newly created ruleset was deleted to avoid orphaned resources" >> $GITHUB_STEP_SUMMARY
  
  workflow-summary:
    name: Generate Workflow Summary
    runs-on: ubuntu-latest
    needs: [check-policy, check-ruleset, create-ruleset, create-policy]
    if: always() && !failure()
    steps:
      - name: Final Workflow Summary
        run: |
          echo "# Vision One Container Security Policy Creation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Overview" >> $GITHUB_STEP_SUMMARY
          echo "* **Ruleset Name**: ${{ github.event.inputs.RULESET_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Policy Name**: ${{ github.event.inputs.POLICY_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.check-policy.result }}" == "success" ]]; then
            echo "## Workflow Status" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ needs.check-ruleset.outputs.ruleset_exists }}" == "true" ]]; then
              echo "* **Ruleset**: Used existing ruleset with ID ${{ needs.check-ruleset.outputs.ruleset_id }}" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.create-ruleset.result }}" == "success" ]]; then
              echo "* **Ruleset**: Created new ruleset with ID ${{ needs.create-ruleset.outputs.ruleset_id }}" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ "${{ needs.create-policy.result }}" == "success" ]]; then
              echo "* **Policy**: Successfully created" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "✅ **SUCCESS**: The workflow has completed successfully." >> $GITHUB_STEP_SUMMARY
            else
              echo "* **Policy**: Failed to create" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "❌ **FAILED**: Policy creation failed. Check logs for details." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## Workflow Status" >> $GITHUB_STEP_SUMMARY
            echo "❌ **STOPPED**: The policy check failed or was aborted." >> $GITHUB_STEP_SUMMARY
            echo "Most likely the policy already exists with the same name." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "* The ruleset and policy files are available as workflow artifacts" >> $GITHUB_STEP_SUMMARY
