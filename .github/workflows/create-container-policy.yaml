name: Create Vision One Container Security Policy

on:
  workflow_dispatch:
    inputs:
      ruleset_name:
        description: 'Ruleset Name'
        required: true
        default: 'DemoLogOnlyRuleset'
      policy_name:
        description: 'Policy Name'
        required: true
        default: 'DemoLogOnlyPolicy'

jobs:
  check-policy:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
      policy_id: ${{ steps.check.outputs.policy_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check if Policy Exists
        id: check
        env:
          API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          POLICY_NAME: ${{ inputs.policy_name }}
        run: bash trendmicro/scripts/check_policy_job.sh

      - name: Job Summary
        run: |
          echo "### Check Policy Job" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Policy Name: ${{ inputs.policy_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Exists: ${{ steps.check.outputs.exists }}" >> $GITHUB_STEP_SUMMARY
          echo "Policy ID: ${{ steps.check.outputs.policy_id }}" >> $GITHUB_STEP_SUMMARY

  check-ruleset:
    needs: check-policy
    if: needs.check-policy.outputs.exists == 'false'
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
      ruleset_id: ${{ steps.check.outputs.ruleset_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check if Ruleset Exists
        id: check
        env:
          API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          RULESET_NAME: ${{ inputs.ruleset_name }}
        run: bash trendmicro/scripts/check_ruleset_job.sh

      - name: Job Summary
        run: |
          echo "### Check Ruleset Job" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Ruleset Name: ${{ inputs.ruleset_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Exists: ${{ steps.check.outputs.exists }}" >> $GITHUB_STEP_SUMMARY
          echo "Ruleset ID: ${{ steps.check.outputs.ruleset_id }}" >> $GITHUB_STEP_SUMMARY

  create-ruleset:
    needs: check-ruleset
    if: needs.check-ruleset.outputs.exists == 'false'
    runs-on: ubuntu-latest
    outputs:
      ruleset_id: ${{ steps.create.outputs.ruleset_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create Ruleset
        id: create
        env:
          API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          RULESET_NAME: ${{ inputs.ruleset_name }}
        run: bash trendmicro/scripts/create_ruleset_job.sh

      - name: Job Summary
        run: |
          echo "### Create Ruleset Job" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Ruleset Name: ${{ inputs.ruleset_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Ruleset ID: ${{ steps.create.outputs.ruleset_id }}" >> $GITHUB_STEP_SUMMARY

  create-policy:
    needs: [check-policy, check-ruleset]
    if: needs.check-policy.outputs.exists == 'false'
    runs-on: ubuntu-latest
    outputs:
      policy_id: ${{ steps.create.outputs.policy_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create Policy
        id: create
        env:
          API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          POLICY_NAME: ${{ inputs.policy_name }}
          RULESET_ID: ${{ needs.create-ruleset.outputs.ruleset_id || needs.check-ruleset.outputs.ruleset_id }}
        run: bash trendmicro/scripts/create_policy_job.sh

      - name: Job Summary
        run: |
          echo "### Create Policy Job" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Policy Name: ${{ inputs.policy_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Policy ID: ${{ steps.create.outputs.policy_id }}" >> $GITHUB_STEP_SUMMARY

  delete-ruleset:
    needs: [create-policy, create-ruleset]
    if: |
      always() &&
      needs.create-policy.result == 'failure' &&
      needs.create-ruleset.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Delete Ruleset
        env:
          API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity
          API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
          RULESET_ID: ${{ needs.create-ruleset.outputs.ruleset_id }}
        run: bash trendmicro/scripts/delete_ruleset_job.sh
