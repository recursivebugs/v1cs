name: Create Vision One Container Security Policy

on:
  workflow_dispatch:
    inputs:
      RULESET_NAME:
        description: 'Ruleset Name'
        required: true
        default: 'DemoLogOnlyRuleset'
      POLICY_NAME:
        description: 'Policy Name'
        required: true
        default: 'DemoLogOnlyPolicy'

env:
  API_URL: https://api.xdr.trendmicro.com/v3.0/containerSecurity
  API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}

jobs:
  check-policy:
    name: Check if Policy Exists
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.set-output.outputs.exists }}
    steps:
      - uses: actions/checkout@v3
      - name: Check Policy
        run: bash trendmicro/scripts/check_policy_job.sh
        env:
          POLICY_NAME: ${{ github.event.inputs.POLICY_NAME }}
      - name: Set output
        id: set-output
        run: echo "exists=$EXISTS" >> $GITHUB_OUTPUT
      - name: Summary
        run: |
          echo "### Check Policy Job" >> $GITHUB_STEP_SUMMARY
          echo "Policy Name: ${{ github.event.inputs.POLICY_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "Exists: $EXISTS" >> $GITHUB_STEP_SUMMARY

  check-ruleset:
    name: Check if Ruleset Exists
    needs: check-policy
    if: needs.check-policy.outputs.exists == 'false'
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.set-output.outputs.exists }}
      ruleset_id: ${{ steps.set-output.outputs.ruleset_id }}
    steps:
      - uses: actions/checkout@v3
      - name: Check Ruleset
        run: bash trendmicro/scripts/check_ruleset_job.sh
        env:
          RULESET_NAME: ${{ github.event.inputs.RULESET_NAME }}
      - name: Set output
        id: set-output
        run: |
          echo "exists=$EXISTS" >> $GITHUB_OUTPUT
          echo "ruleset_id=$RULESET_ID" >> $GITHUB_OUTPUT
      - name: Summary
        run: |
          echo "### Check Ruleset Job" >> $GITHUB_STEP_SUMMARY
          echo "Ruleset Name: ${{ github.event.inputs.RULESET_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "Exists: $EXISTS" >> $GITHUB_STEP_SUMMARY
          echo "Ruleset ID: $RULESET_ID" >> $GITHUB_STEP_SUMMARY

  create-ruleset:
    name: Create Ruleset
    needs: check-ruleset
    if: needs.check-ruleset.outputs.exists == 'false'
    runs-on: ubuntu-latest
    outputs:
      ruleset_id: ${{ steps.set-output.outputs.ruleset_id }}
    steps:
      - uses: actions/checkout@v3
      - name: Create Ruleset
        run: bash trendmicro/scripts/create_ruleset_job.sh
        env:
          RULESET_NAME: ${{ github.event.inputs.RULESET_NAME }}
      - name: Set output
        id: set-output
        run: echo "ruleset_id=$RULESET_ID" >> $GITHUB_OUTPUT
      - name: Summary
        run: |
          echo "### Create Ruleset Job" >> $GITHUB_STEP_SUMMARY
          echo "Ruleset ID: $RULESET_ID" >> $GITHUB_STEP_SUMMARY

  create-policy:
    name: Create Policy
    needs: [check-policy, create-ruleset, check-ruleset]
    if: needs.check-policy.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create Policy
        run: bash trendmicro/scripts/create_policy_job.sh
        env:
          POLICY_NAME: ${{ github.event.inputs.POLICY_NAME }}
          RULESET_ID: ${{ needs.create-ruleset.outputs.ruleset_id || needs.check-ruleset.outputs.ruleset_id }}
      - name: Summary
        run: echo "### Create Policy Job" >> $GITHUB_STEP_SUMMARY
