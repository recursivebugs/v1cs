name: Create Vision One Container Security Policy

on:
  workflow_dispatch:
    inputs:
      RULESET_NAME:
        description: "Ruleset Name"
        required: true
        default: "DemoLogOnlyRuleset"
      POLICY_NAME:
        description: "Policy Name"
        required: true
        default: "DemoLogOnlyPolicy"

env:
  API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity
  API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}

jobs:
  check-policy:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.set-output.outputs.exists }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Run check_policy script
        env:
          POLICY_NAME: ${{ github.event.inputs.POLICY_NAME }}
        run: bash trendmicro/scripts/check_policy_job.sh

      - name: Set policy existence output
        id: set-output
        run: echo "exists=$(cat trendmicro/scripts/check_policy_output.txt)" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "### Check Policy Job" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Policy Name: ${{ github.event.inputs.POLICY_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "Exists: $(cat trendmicro/scripts/check_policy_output.txt)" >> $GITHUB_STEP_SUMMARY

  check-ruleset:
    runs-on: ubuntu-latest
    needs: check-policy
    if: needs.check-policy.outputs.exists == 'false'
    outputs:
      exists: ${{ steps.set-output.outputs.exists }}
      ruleset_id: ${{ steps.set-output.outputs.ruleset_id }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Run check_ruleset script
        env:
          RULESET_NAME: ${{ github.event.inputs.RULESET_NAME }}
        run: bash trendmicro/scripts/check_ruleset_job.sh

      - name: Set ruleset existence output
        id: set-output
        run: |
          echo "exists=$(cat trendmicro/scripts/check_ruleset_output.txt)" >> $GITHUB_OUTPUT
          echo "ruleset_id=$(cat trendmicro/scripts/ruleset_id.txt)" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "### Check Ruleset Job" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Ruleset Name: ${{ github.event.inputs.RULESET_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "Exists: $(cat trendmicro/scripts/check_ruleset_output.txt)" >> $GITHUB_STEP_SUMMARY
          echo "Ruleset ID: $(cat trendmicro/scripts/ruleset_id.txt)" >> $GITHUB_STEP_SUMMARY

  create-ruleset:
    runs-on: ubuntu-latest
    needs: check-ruleset
    if: needs.check-ruleset.outputs.exists == 'false'
    outputs:
      ruleset_id: ${{ steps.set-output.outputs.ruleset_id }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Create ruleset if not found
        env:
          RULESET_NAME: ${{ github.event.inputs.RULESET_NAME }}
        run: bash trendmicro/scripts/create_ruleset_job.sh

      - name: Set ruleset ID
        id: set-output
        run: echo "ruleset_id=$(cat trendmicro/scripts/ruleset_id.txt)" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "### Create Ruleset Job" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Ruleset Name: ${{ github.event.inputs.RULESET_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "Created: true" >> $GITHUB_STEP_SUMMARY
          echo "Ruleset ID: $(cat trendmicro/scripts/ruleset_id.txt)" >> $GITHUB_STEP_SUMMARY

  create-policy:
    runs-on: ubuntu-latest
    needs: [check-ruleset, create-ruleset]
    if: needs.check-policy.outputs.exists == 'false'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Create policy using ruleset
        env:
          POLICY_NAME: ${{ github.event.inputs.POLICY_NAME }}
          RULESET_ID: ${{ needs.create-ruleset.outputs.ruleset_id || needs.check-ruleset.outputs.ruleset_id }}
        run: bash trendmicro/scripts/create_policy_job.sh

      - name: Summary
        run: |
          echo "### Create Policy Job" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Policy Name: ${{ github.event.inputs.POLICY_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "Created: true" >> $GITHUB_STEP_SUMMARY
          echo "Ruleset ID: ${{ env.RULESET_ID }}" >> $GITHUB_STEP_SUMMARY
