name: Create Vision One Container Security Policy

on:
  workflow_dispatch:

env:
  API_URL: https://api.xdr.trendmicro.com/beta/containerSecurity
  API_KEY: ${{ secrets.V1_API_KEY }}
  RULESET_NAME: DemoLogOnlyRuleset
  POLICY_NAME: DemoLogOnlyPolicy

jobs:
  check-policy:
    runs-on: ubuntu-latest
    steps:
      - name: Check if Policy Exists
        run: |
          response=$(curl -s -H "Authorization: Bearer $API_KEY" -H "Accept: application/json" "$API_URL/policies")
          if echo "$response" | grep -q "\"name\": \"$POLICY_NAME\""; then
            echo "Policy $POLICY_NAME already exists. Exiting..."
            exit 1
          fi

  check-ruleset:
    runs-on: ubuntu-latest
    needs: check-policy
    outputs:
      ruleset_id: ${{ steps.get-id.outputs.ruleset_id }}
    steps:
      - name: Check if Ruleset Exists
        id: get-id
        run: |
          response=$(curl -s -H "Authorization: Bearer $API_KEY" -H "Accept: application/json" "$API_URL/rulesets")
          RULESET_ID=$(echo "$response" | jq -r ".items[] | select(.name==\"$RULESET_NAME\") | .id")
          
          if [ -n "$RULESET_ID" ]; then
            echo "Ruleset exists: $RULESET_ID"
            echo "ruleset_id=$RULESET_ID" >> $GITHUB_OUTPUT
          else
            echo "ruleset_id=none" >> $GITHUB_OUTPUT
          fi

  create-ruleset:
    runs-on: ubuntu-latest
    needs: check-ruleset
    if: needs.check-ruleset.outputs.ruleset_id == 'none'
    outputs:
      ruleset_id: ${{ steps.create.outputs.ruleset_id }}
    steps:
      - name: Create Ruleset
        id: create
        run: |
          RULESET_ID=$(curl -s -X POST "$API_URL/rulesets" \
            -H "Authorization: Bearer $API_KEY" \
            -H "Content-Type: application/json" \
            -d @trendmicro/runtimeruleset.json | jq -r ".id")
          
          if [ "$RULESET_ID" == "null" ]; then
            echo "Ruleset creation failed"
            exit 1
          fi
          echo "Created Ruleset: $RULESET_ID"
          echo "ruleset_id=$RULESET_ID" >> $GITHUB_OUTPUT

  create-policy:
    runs-on: ubuntu-latest
    needs: [check-ruleset, create-ruleset]
    steps:
      - name: Determine Ruleset ID
        run: |
          RULESET_ID=${{ needs.check-ruleset.outputs.ruleset_id }}
          if [ "$RULESET_ID" == "none" ]; then
            RULESET_ID=${{ needs.create-ruleset.outputs.ruleset_id }}
          fi
          jq --arg id "$RULESET_ID" '.rulesets[0].id=$id' trendmicro/policy.json > tmp_policy.json

      - name: Create Policy
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$API_URL/policies" \
            -H "Authorization: Bearer $API_KEY" \
            -H "Content-Type: application/json" \
            -d @tmp_policy.json)

          if [ "$response" -ne 201 ]; then
            echo "Policy creation failed with HTTP code: $response"
            exit 1
          fi

  cleanup-ruleset:
    runs-on: ubuntu-latest
    needs: create-policy
    if: failure() && needs.create-ruleset.result == 'success'
    steps:
      - name: Delete Ruleset
        run: |
          RULESET_ID=${{ needs.create-ruleset.outputs.ruleset_id }}
          curl -s -X DELETE "$API_URL/rulesets/$RULESET_ID" \
            -H "Authorization: Bearer $API_KEY"
