name: Deploy Container Security with Policy Management

on:
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'EKS Cluster Name'
        required: true
        type: string
      region:
        description: 'AWS Region'
        required: true
        default: 'us-west-2'
        type: string
      group_id:
        description: 'Group ID'
        required: false
        default: '00000000-0000-0000-0000-000000000001'
        type: string
      ruleset_name:
        description: 'Ruleset Name'
        required: false
        default: 'DemoLogOnlyRuleset'
        type: string
      policy_name:
        description: 'Policy Name'
        required: false
        default: 'DemoLogOnlyPolicy'
        type: string

env:
  CLUSTER_NAME: ${{ github.event.inputs.cluster_name }}
  AWS_REGION: ${{ github.event.inputs.region }}
  API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
  GROUP_ID: ${{ github.event.inputs.group_id }}
  RULESET_NAME: ${{ github.event.inputs.ruleset_name }}
  POLICY_NAME: ${{ github.event.inputs.policy_name }}
  POLICY_FILE: "trendmicro/policy.json"
  RULESET_FILE: "trendmicro/runtimeruleset.json"

jobs:
  manage-security-policies:
    runs-on: ubuntu-latest
    outputs:
      policy_id: ${{ steps.set-policy-id.outputs.policy_id }}
      ruleset_id: ${{ steps.set-ruleset-id.outputs.ruleset_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Check if ruleset exists
        id: check-ruleset
        run: |
          output=$(python trendmicro/scripts/check_ruleset.py)
          echo "$output"
          if echo "$output" | grep -q "exists=true"; then
            ruleset_id=$(echo "$output" | grep "ruleset_id=" | cut -d'=' -f2)
            echo "Ruleset already exists with ID: $ruleset_id"
            echo "ruleset_id=$ruleset_id" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Create ruleset
        id: create-ruleset
        run: |
          python trendmicro/scripts/create_ruleset.py
          output=$(python trendmicro/scripts/check_ruleset.py)
          ruleset_id=$(echo "$output" | grep "ruleset_id=" | cut -d'=' -f2)
          if [ -z "$ruleset_id" ]; then
            echo "ERROR: Unable to fetch RULESET_ID"
            exit 1
          fi
          echo "ruleset_id=$ruleset_id" >> $GITHUB_OUTPUT

      - name: Set ruleset ID
        id: set-ruleset-id
        run: |
          echo "ruleset_id=${{ steps.create-ruleset.outputs.ruleset_id }}" >> $GITHUB_OUTPUT

      - name: Check if policy exists
        id: check-policy
        run: |
          output=$(python trendmicro/scripts/check_policy.py)
          echo "$output"
          if echo "$output" | grep -q "exists=true"; then
            policy_id=$(echo "$output" | grep "policy_id=" | cut -d'=' -f2)
            echo "Policy already exists with ID: $policy_id"
            echo "policy_id=$policy_id" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Create policy
        id: create-policy
        run: |
          python trendmicro/scripts/create_policy.py
          output=$(python trendmicro/scripts/check_policy.py)
          policy_id=$(echo "$output" | grep "policy_id=" | cut -d'=' -f2)
          if [ -z "$policy_id" ]; then
            echo "ERROR: Unable to fetch POLICY_ID"
            exit 1
          fi
          echo "policy_id=$policy_id" >> $GITHUB_OUTPUT

      - name: Set policy ID
        id: set-policy-id
        run: |
          echo "policy_id=${{ steps.create-policy.outputs.policy_id }}" >> $GITHUB_OUTPUT
