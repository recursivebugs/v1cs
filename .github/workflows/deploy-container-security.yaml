name: Deploy Container Security with Policy Management

on:
  workflow_dispatch:
    inputs:
      customer_name:
        description: 'Customer Name'
        required: true
        default: 'DemoCluster001'
      ruleset_name:
        description: 'Ruleset Name'
        required: true
        default: 'DemoLogOnlyRuleset'  # Matches the name in runtimeruleset.json
      policy_name:
        description: 'Policy Name'
        required: true
        default: 'DemoLogOnlyPolicy'  # Matches the name in policy.json
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-west-2'

jobs:
  manage-security-policies:
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: ${{ github.event.inputs.customer_name }}
      AWS_REGION: ${{ github.event.inputs.aws_region }}
      API_KEY: ${{ secrets.TRENDMICRO_API_KEY }}
      GROUP_ID: '00000000-0000-0000-0000-000000000001'
      RULESET_NAME: ${{ github.event.inputs.ruleset_name }}
      POLICY_NAME: ${{ github.event.inputs.policy_name }}
      POLICY_FILE: trendmicro/policy.json
      RULESET_FILE: trendmicro/runtimeruleset.json

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Make scripts executable
        run: |
          chmod +x trendmicro/scripts/*.py

      - name: Manage Security Policies
        run: |
          # Enable shell debugging
          set -x
          
          # Check if API_KEY is set
          if [ -z "$API_KEY" ]; then
            echo "ERROR: API_KEY environment variable is not set or empty"
            exit 1
          fi
          
          # Verify Python scripts exist
          if [ ! -f "trendmicro/scripts/check_ruleset.py" ]; then
            echo "ERROR: check_ruleset.py not found"
            ls -la trendmicro/scripts/
            exit 1
          fi
          
          # Check if ruleset exists
          echo "Running check_ruleset.py..."
          python trendmicro/scripts/check_ruleset.py || { echo "check_ruleset.py failed with exit code $?"; exit 1; }
          output=$(python trendmicro/scripts/check_ruleset.py)
          echo "$output"
          
          if echo "$output" | grep -q "exists=true"; then
            echo "Ruleset '${RULESET_NAME}' already exists. Retrieving ruleset ID..."
            ruleset_id=$(echo "$output" | grep "ruleset_id=" | cut -d'=' -f2)
            echo "Retrieved ruleset ID: ${ruleset_id}"
            export RULESET_ID="${ruleset_id}"
          else
            echo "Ruleset '${RULESET_NAME}' doesn't exist. Creating new ruleset..."
            
            # Create ruleset
            echo "Running create_ruleset.py..."
            python trendmicro/scripts/create_ruleset.py || { echo "create_ruleset.py failed with exit code $?"; exit 1; }
            output=$(python trendmicro/scripts/create_ruleset.py)
            echo "$output"
            
            # Extract the ruleset ID from the output
            ruleset_id=$(echo "$output" | grep "ruleset_id=" | cut -d'=' -f2)
            echo "Created ruleset with ID: ${ruleset_id}"
            export RULESET_ID="${ruleset_id}"
          fi
          
          # Check if policy exists
          echo "Running check_policy.py..."
          python trendmicro/scripts/check_policy.py || { echo "check_policy.py failed with exit code $?"; exit 1; }
          output=$(python trendmicro/scripts/check_policy.py)
          echo "$output"
          
          if echo "$output" | grep -q "exists=true"; then
            echo "Policy '${POLICY_NAME}' already exists. No action needed."
            policy_id=$(echo "$output" | grep "policy_id=" | cut -d'=' -f2)
            echo "Policy ID: ${policy_id}"
          else
            echo "Policy '${POLICY_NAME}' doesn't exist. Creating new policy..."
            
            # Create policy with the retrieved ruleset ID
            echo "Using RULESET_ID: ${ruleset_id}"
            export RULESET_ID="${ruleset_id}"
            
            # Create policy
            echo "Running create_policy.py..."
            python trendmicro/scripts/create_policy.py || { echo "create_policy.py failed with exit code $?"; exit 1; }
            output=$(python trendmicro/scripts/create_policy.py)
            echo "$output"
            
            policy_id=$(echo "$output" | grep "policy_id=" | cut -d'=' -f2)
            echo "Created policy with ID: ${policy_id}"
          fi
          
          echo "Security policies management completed successfully."
