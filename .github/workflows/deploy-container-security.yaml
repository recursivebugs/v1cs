name: Deploy Container Security with Policy Management

on:
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'EKS Cluster Name'
        required: true
        type: string
      region:
        description: 'AWS Region'
        required: true
        default: 'us-west-2'
        type: string
      group_id:
        description: 'Group ID'
        required: false
        default: '00000000-0000-0000-0000-000000000001'
        type: string
      ruleset_name:
        description: 'Ruleset Name'
        required: false
        default: 'DemoLogOnlyRuleset'
        type: string
      policy_name:
        description: 'Policy Name'
        required: false
        default: 'DemoLogOnlyPolicy'
        type: string

env:
  CLUSTER_NAME: ${{ github.event.inputs.cluster_name || vars.EKS_CLUSTER_NAME }}
  AWS_REGION: ${{ github.event.inputs.region || vars.AWS_REGION }}
  API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
  GROUP_ID: ${{ github.event.inputs.group_id }}
  RULESET_NAME: ${{ github.event.inputs.ruleset_name }}
  POLICY_NAME: ${{ github.event.inputs.policy_name }}
  POLICY_ID: ""
  POLICY_FILE: "trendmicro/policy.json"
  RULESET_FILE: "trendmicro/runtimeruleset.json"

jobs:
  manage-security-policies:
    runs-on: ubuntu-latest
    outputs:
      policy_id: ${{ steps.update-policy-id.outputs.policy_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Debug files
        run: |
          echo "Repository contents:"
          ls -la
          echo "Trendmicro directory contents:"
          ls -la trendmicro/
          echo "Trendmicro scripts directory contents:"
          ls -la trendmicro/scripts/

      - name: Check if ruleset exists
        id: check-ruleset
        run: |
          export API_KEY=${{ env.API_KEY }}
          export RULESET_NAME=${{ env.RULESET_NAME }}
          
          output=$(python trendmicro/scripts/check_ruleset.py)
          echo "$output"

          if echo "$output" | grep -q "exists=true"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            ruleset_id=$(echo "$output" | grep "ruleset_id=" | cut -d'=' -f2)
            echo "ruleset_id=$ruleset_id" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create ruleset if it doesn't exist
        id: create-ruleset
        if: steps.check-ruleset.outputs.exists != 'true'
        run: |
          export API_KEY=${{ env.API_KEY }}
          export RULESET_FILE=${{ env.RULESET_FILE }}
          export RULESET_NAME="${{ env.RULESET_NAME }}"

          if [ ! -f "$RULESET_FILE" ]; then
            echo "Error: Ruleset file not found at $RULESET_FILE"
            ls -la trendmicro/
            exit 1
          fi

          python -u trendmicro/scripts/create_ruleset.py
          RESULT=$?

          if [ $RESULT -eq 0 ]; then
            output=$(python -u trendmicro/scripts/create_ruleset.py | grep "ruleset_id=")
            ruleset_id=$(echo "$output" | sed 's/ruleset_id=//')
            
            echo "ruleset_id=$ruleset_id" >> $GITHUB_OUTPUT
            echo "Successfully created ruleset with ID: $ruleset_id"
          else
            echo "Script failed with exit code $RESULT, exiting."
            exit 1
          fi

      - name: Set ruleset ID
        id: set-ruleset-id
        run: |
          RULESET_ID="${{ steps.check-ruleset.outputs.ruleset_id || steps.create-ruleset.outputs.ruleset_id }}"

          if [ -z "$RULESET_ID" ] || [ "$RULESET_ID" == "CREATED_BUT_ID_UNKNOWN" ]; then
            echo "ERROR: Missing valid RULESET_ID - exiting."
            exit 1
          fi

          echo "RULESET_ID=$RULESET_ID"
          echo "RULESET_ID=$RULESET_ID" >> $GITHUB_ENV
          echo "ruleset_id=$RULESET_ID" >> $GITHUB_OUTPUT

      - name: Check if policy exists
        id: check-policy
        run: |
          export API_KEY=${{ env.API_KEY }}
          export POLICY_NAME=${{ env.POLICY_NAME }}
          
          output=$(python trendmicro/scripts/check_policy.py)
          echo "$output"

          if echo "$output" | grep -q "exists=true"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            policy_id=$(echo "$output" | grep "policy_id=" | cut -d'=' -f2)
            echo "policy_id=$policy_id" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create policy if it doesn't exist
        id: create-policy
        if: steps.check-policy.outputs.exists != 'true'
        run: |
          export API_KEY=${{ env.API_KEY }}
          export POLICY_FILE=${{ env.POLICY_FILE }}
          export RULESET_ID=${{ env.RULESET_ID }}

          if [ "$RULESET_ID" == "CREATED_BUT_ID_UNKNOWN" ]; then
            echo "ERROR: RULESET_ID is invalid, cannot create policy."
            exit 1
          fi

          if [ ! -f "$POLICY_FILE" ]; then
            echo "Error: Policy file not found at $POLICY_FILE"
            ls -la trendmicro/
            exit 1
          fi

          python -u trendmicro/scripts/create_policy.py
          RESULT=$?

          if [ $RESULT -eq 0 ]; then
            output=$(python -u trendmicro/scripts/create_policy.py | grep "policy_id=")
            policy_id=$(echo "$output" | sed 's/policy_id=//')

            echo "policy_id=$policy_id" >> $GITHUB_OUTPUT
            echo "Successfully created policy with ID: $policy_id"
          else
            echo "Script failed with exit code $RESULT, exiting."
            exit 1
          fi

      - name: Update Policy ID
        id: update-policy-id
        run: |
          POLICY_ID="${{ steps.check-policy.outputs.policy_id || steps.create-policy.outputs.policy_id }}"
          echo "POLICY_ID=$POLICY_ID" >> $GITHUB_ENV
          echo "policy_id=$POLICY_ID" >> $GITHUB_OUTPUT
