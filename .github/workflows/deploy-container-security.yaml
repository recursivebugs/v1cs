name: Deploy Container Security with Policy Management

on:
  workflow_dispatch:
    inputs:
      customer_name:
        description: 'Customer Name'
        required: true
        default: 'DemoCluster001'
      ruleset_name:
        description: 'Ruleset Name'
        required: true
        default: 'DemoLogOnlyRuleset'  # Matches the name in runtimeruleset.json
      policy_name:
        description: 'Policy Name'
        required: true
        default: 'DemoLogOnlyPolicy'  # Matches the name in policy.json
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-west-2'

jobs:
  manage-security-policies:
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: ${{ github.event.inputs.customer_name }}
      AWS_REGION: ${{ github.event.inputs.aws_region }}
      API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
      GROUP_ID: '00000000-0000-0000-0000-000000000001'
      RULESET_NAME: ${{ github.event.inputs.ruleset_name }}
      POLICY_NAME: ${{ github.event.inputs.policy_name }}
      POLICY_FILE: trendmicro/policy.json
      RULESET_FILE: trendmicro/runtimeruleset.json

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Make scripts executable
        run: |
          chmod +x trendmicro/scripts/*.py

      - name: Create debug script
        run: |
          cat > trendmicro/scripts/debug_policy_api.py << 'EOF'
          #!/usr/bin/env python3
          import requests
          import json
          import os
          import sys
          import hashlib
          import re
          
          def debug_request():
              # Get environment variables
              api_key = os.getenv('API_KEY')
              policy_file = os.getenv('POLICY_FILE')
              ruleset_id = os.getenv('RULESET_ID')
              
              print("=== DEBUG INFO ===")
              print(f"API_KEY present: {'Yes' if api_key else 'No'}")
              print(f"API_KEY length: {len(api_key) if api_key else 'N/A'}")
              print(f"API_KEY hash: {hashlib.sha256(api_key.encode()).hexdigest()[:10] if api_key else 'N/A'}")
              print(f"POLICY_FILE: {policy_file}")
              print(f"RULESET_ID: {ruleset_id}")
              
              # Check if policy file exists
              if not os.path.isfile(policy_file):
                  print(f"ERROR: Policy file not found: {policy_file}")
                  sys.exit(1)
                  
              # Read the policy file as raw text
              with open(policy_file, 'r') as file:
                  policy_content = file.read()
              
              # Print file info
              print(f"Policy file size: {len(policy_content)} bytes")
              print(f"Policy file hash: {hashlib.sha256(policy_content.encode()).hexdigest()[:10]}")
              
              # Use regex to fix the cron expression
              policy_content = re.sub(r'"cron":\s*"59\s+3\s+\*\s+\*6"', '"cron": "59 3 * * 6"', policy_content)
              
              # Check if ruleset ID exists in the policy
              if "DemoLogOnlyRuleset-" in policy_content:
                  print("Found existing ruleset ID in policy file")
                  
                  # Extract the existing ruleset ID pattern
                  existing_id_match = re.search(r'"id"\s*:\s*"(DemoLogOnlyRuleset-[^"]+)"', policy_content)
                  if existing_id_match:
                      existing_id = existing_id_match.group(1)
                      print(f"Existing ruleset ID: {existing_id}")
                      
                      # Replace the existing ID with the new one
                      policy_content = policy_content.replace(existing_id, ruleset_id)
                      print(f"Replaced with new ruleset ID: {ruleset_id}")
              else:
                  print("No existing ruleset ID found. Looking for rulesetids array...")
                  
                  # Look for rulesetids array
                  if '"rulesetids": [' in policy_content:
                      print("Found rulesetids array")
                      
                      # Replace the rulesetids array content
                      policy_content = re.sub(
                          r'"rulesetids"\s*:\s*\[\s*(\{[^}]+\}\s*,?\s*)*\]',
                          f'"rulesetids": ["{ruleset_id}"]',
                          policy_content
                      )
                      print("Updated rulesetids array")
              name: Deploy Container Security with Policy Management

on:
  workflow_dispatch:
    inputs:
      customer_name:
        description: 'Customer Name'
        required: true
        default: 'DemoCluster001'
      ruleset_name:
        description: 'Ruleset Name'
        required: true
        default: 'DemoLogOnlyRuleset'  # Matches the name in runtimeruleset.json
      policy_name:
        description: 'Policy Name'
        required: true
        default: 'DemoLogOnlyPolicy'  # Matches the name in policy.json
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-west-2'

jobs:
  manage-security-policies:
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: ${{ github.event.inputs.customer_name }}
      AWS_REGION: ${{ github.event.inputs.aws_region }}
      API_KEY: ${{ secrets.CONTAINER_SECURITY_API_KEY }}
      GROUP_ID: '00000000-0000-0000-0000-000000000001'
      RULESET_NAME: ${{ github.event.inputs.ruleset_name }}
      POLICY_NAME: ${{ github.event.inputs.policy_name }}
      POLICY_FILE: trendmicro/policy.json
      RULESET_FILE: trendmicro/runtimeruleset.json

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Make scripts executable
        run: |
          chmod +x trendmicro/scripts/*.py

      - name: Run debug and troubleshooting
        run: |
          # Enable shell debugging
          set -x
          
          # Check if API_KEY is set
          if [ -z "$API_KEY" ]; then
            echo "ERROR: API_KEY environment variable is not set or empty"
            exit 1
          fi
          
          # Verify Python scripts exist
          if [ ! -f "trendmicro/scripts/check_ruleset.py" ]; then
            echo "ERROR: check_ruleset.py not found"
            ls -la trendmicro/scripts/
            exit 1
          fi
          
          # Debug: Print the directory structure
          echo "Directory structure:"
          find trendmicro -type f | sort
          
          # Debug: Print file content hash
          echo "Policy file hash:"
          python -c "import hashlib; print(hashlib.md5(open('$POLICY_FILE', 'rb').read()).hexdigest())"
          
          # Check if ruleset exists
          echo "Running check_ruleset.py..."
          python trendmicro/scripts/check_ruleset.py || { echo "check_ruleset.py failed with exit code $?"; exit 1; }
          output=$(python trendmicro/scripts/check_ruleset.py)
          echo "$output"
          
          if echo "$output" | grep -q "exists=true"; then
            echo "Ruleset '${RULESET_NAME}' already exists. Retrieving ruleset ID..."
            ruleset_id=$(echo "$output" | grep "ruleset_id=" | cut -d'=' -f2)
            echo "Retrieved ruleset ID: ${ruleset_id}"
            export RULESET_ID="${ruleset_id}"
          else
            echo "Ruleset '${RULESET_NAME}' doesn't exist. Creating new ruleset..."
            
            # Create ruleset
            echo "Running create_ruleset.py..."
            python trendmicro/scripts/create_ruleset.py || { echo "create_ruleset.py failed with exit code $?"; exit 1; }
            output=$(python trendmicro/scripts/create_ruleset.py)
            echo "$output"
            
            # Extract the ruleset ID from the output
            ruleset_id=$(echo "$output" | grep "ruleset_id=" | cut -d'=' -f2)
            echo "Created ruleset with ID: ${ruleset_id}"
            export RULESET_ID="${ruleset_id}"
          fi
          
          # Run the debug script
          echo "Running policy API debug script..."
          python trendmicro/scripts/debug_policy_api.py
          
          # Check if policy exists
          echo "Running check_policy.py..."
          python trendmicro/scripts/check_policy.py || { echo "check_policy.py failed with exit code $?"; }
          output=$(python trendmicro/scripts/check_policy.py)
          echo "$output"
          
          if echo "$output" | grep -q "exists=true"; then
            echo "Policy '${POLICY_NAME}' already exists. No action needed."
            policy_id=$(echo "$output" | grep "policy_id=" | cut -d'=' -f2)
            echo "Policy ID: ${policy_id}"
            echo "Security policies management completed successfully."
            exit 0
          else
            echo "Policy '${POLICY_NAME}' doesn't exist. Attempting creation has been handled by debug script."
            echo "Please review debug output and update scripts accordingly."
            # Skip real policy creation for now since we're debugging
            exit 0
          fi
