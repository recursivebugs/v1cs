name: Build and Deploy to EKS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  SECURITY_MODE: ${{ vars.SECURITY_MODE || 'protect' }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME || 'my-app' }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ github.repository_owner }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Save Docker image
        run: docker save ${{ github.repository_owner }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} -o image.tar
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar
          retention-days: 7

  scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
      
      - name: Scan image for vulnerabilities
        run: |
          echo "Running in ${{ env.SECURITY_MODE }} mode"
          
          mkdir -p scan-results
          
          # Critical vulnerabilities fail in protect mode
          trivy image --input image.tar --format json --output scan-results/vulnerabilities.json
          
          # Create summary
          echo "## 🔍 Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "### Overview" >> $GITHUB_STEP_SUMMARY
          
          CRITICAL=$(jq '[.Results[].Vulnerabilities[] | select(.Severity=="CRITICAL")] | length' scan-results/vulnerabilities.json)
          HIGH=$(jq '[.Results[].Vulnerabilities[] | select(.Severity=="HIGH")] | length' scan-results/vulnerabilities.json)
          MEDIUM=$(jq '[.Results[].Vulnerabilities[] | select(.Severity=="MEDIUM")] | length' scan-results/vulnerabilities.json)
          LOW=$(jq '[.Results[].Vulnerabilities[] | select(.Severity=="LOW")] | length' scan-results/vulnerabilities.json)
          
          echo "| Severity  | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Critical  | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
          echo "| High      | $HIGH |" >> $GITHUB_STEP_SUMMARY
          echo "| Medium    | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
          echo "| Low       | $LOW |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL" -gt 0 ] && [ "${{ env.SECURITY_MODE }}" = "protect" ]; then
            echo "Critical vulnerabilities found in PROTECT mode! Failing..."
            exit 1
          fi
      
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: scan-results
          retention-days: 7

  push-to-ecr:
    needs: scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || \
          aws ecr create-repository \
            --repository-name ${ECR_REPOSITORY} \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
      
      - name: Load and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker load -i image.tar
          docker tag ${{ github.repository_owner }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker tag ${{ github.repository_owner }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          echo "IMAGE=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

  deploy-to-k8s:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl cluster-info
      
      - name: Create namespace if not exists
        run: |
          kubectl create namespace app-namespace --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Kubernetes ConfigMap and Secrets
        run: |
          # Create ConfigMap
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: app-config
            namespace: app-namespace
          data:
            APP_ENV: "${{ vars.APP_ENV || 'production' }}"
            APP_URL: "${{ vars.APP_URL || 'http://localhost' }}"
          EOF
          
          # Create Secrets
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: app-secrets
            namespace: app-namespace
          type: Opaque
          data:
            APP_KEY: $(echo -n "${{ secrets.APP_KEY || 'default-app-key' }}" | base64)
            DB_PASSWORD: $(echo -n "${{ secrets.DB_PASSWORD || 'default-password' }}" | base64)
          EOF

      - name: Deploy to Kubernetes
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cat <<EOF > deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: app-deployment
            namespace: app-namespace
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: my-app
            template:
              metadata:
                labels:
                  app: my-app
              spec:
                containers:
                - name: app
                  image: $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
                  ports:
                  - containerPort: 80
                  env:
                  - name: APP_ENV
                    valueFrom:
                      configMapKeyRef:
                        name: app-config
                        key: APP_ENV
                  - name: APP_URL
                    valueFrom:
                      configMapKeyRef:
                        name: app-config
                        key: APP_URL
                  - name: APP_KEY
                    valueFrom:
                      secretKeyRef:
                        name: app-secrets
                        key: APP_KEY
                  - name: DB_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: app-secrets
                        key: DB_PASSWORD
          EOF
          
          cat <<EOF > service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: app-service
            namespace: app-namespace
          spec:
            selector:
              app: my-app
            ports:
            - port: 80
              targetPort: 80
            type: LoadBalancer
          EOF
          
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

      - name: Verify Deployment
        run: |
          echo "Checking deployments..."
          kubectl get deployments -n app-namespace
          
          echo "Checking services..."
          kubectl get services -n app-namespace
          
          echo "Waiting for deployment rollout..."
          kubectl rollout status deployment/app-deployment -n app-namespace --timeout=180s
          
          echo "Deployment completed successfully."
          
          # Get Load Balancer URL if available
          LB_HOSTNAME=$(kubectl get service app-service -n app-namespace -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ ! -z "$LB_HOSTNAME" ]; then
            echo "Application is available at: http://$LB_HOSTNAME"
            echo "Load Balancer Hostname: $LB_HOSTNAME" >> $GITHUB_STEP_SUMMARY
          else
            echo "Load Balancer is being provisioned. Check AWS console for details."
          fi