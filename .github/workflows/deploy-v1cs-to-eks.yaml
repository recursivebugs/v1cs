name: Deploy Vision One Container Security to EKS

on:
  workflow_dispatch:
    inputs:
      policy_id:
        description: 'Vision One Container Security Policy ID'
        required: true
        type: string
      group_id:
        description: 'Vision One Container Security Group ID'
        required: true
        default: '00000000-0000-0000-0000-000000000001'
        type: string
      cluster_name:
        description: 'EKS Cluster Name (must exist)'
        required: true
        default: 'DemoCluster001'
        type: string
      region:
        description: 'AWS Region'
        required: true
        default: 'us-west-2'
        type: string
      namespace_exclusions:
        description: 'Namespaces to exclude (comma-separated)'
        required: false
        default: 'kube-system'
        type: string

env:
  AWS_REGION: ${{ github.event.inputs.region }}
  CLUSTER_NAME: ${{ github.event.inputs.cluster_name }}
  V1CS_POLICY_ID: ${{ github.event.inputs.policy_id }}
  V1CS_GROUP_ID: ${{ github.event.inputs.group_id }}
  NAMESPACE_EXCLUSIONS: ${{ github.event.inputs.namespace_exclusions }}
  V1CS_API_URL: https://api.xdr.trendmicro.com/v3.0/containerSecurity

jobs:
  deploy-container-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Setup Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Connect to EKS Cluster
        id: connect-eks
        run: |
          echo "Connecting to EKS cluster: $CLUSTER_NAME in region $AWS_REGION"
          
          # Check if the cluster exists
          if ! aws eks describe-cluster --name $CLUSTER_NAME --region $AWS_REGION &>/dev/null; then
            echo "::error::Cluster '$CLUSTER_NAME' does not exist in region $AWS_REGION"
            exit 1
          fi
          
          # Update kubeconfig to connect to the cluster
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
          
          # Verify connection
          if ! kubectl get nodes &>/dev/null; then
            echo "::error::Failed to connect to cluster '$CLUSTER_NAME'"
            exit 1
          fi
          
          echo "✅ Successfully connected to EKS cluster: $CLUSTER_NAME"
          echo "Node count: $(kubectl get nodes --no-headers | wc -l)"
          echo "Kubernetes version: $(kubectl version --short | grep 'Server Version' | cut -d' ' -f3)"

      - name: Create Vision One Container Security Registration Secret
        run: |
          echo "Creating trendmicro-system namespace if it doesn't exist"
          kubectl create namespace trendmicro-system --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Creating Vision One Container Security registration key secret"
          kubectl create secret generic trendmicro-container-security-registration-key \
            -n trendmicro-system \
            --from-literal=registration.key=${{ secrets.CONTAINER_SECURITY_API_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "✅ Secret created successfully"

      - name: Prepare Helm Values File
        run: |
          echo "Creating customized overrides.yaml file"
          
          # Format exclusion namespaces as a YAML array
          IFS=',' read -ra EXCLUSIONS <<< "$NAMESPACE_EXCLUSIONS"
          EXCLUSIONS_YAML="["
          for ns in "${EXCLUSIONS[@]}"; do
            EXCLUSIONS_YAML+="$(echo $ns | xargs),"
          done
          EXCLUSIONS_YAML="${EXCLUSIONS_YAML%,}]"
          
          # Create the overrides.yaml file
          cat > overrides.yaml << EOF
          cloudOne:
            clusterRegistrationKey: true
            groupId: $V1CS_GROUP_ID
            clusterName: $CLUSTER_NAME
            clusterNamePrefix: $CLUSTER_NAME
            policyId: $V1CS_POLICY_ID
            endpoint: https://container.us-1.cloudone.trendmicro.com
            exclusion:
              namespaces: $EXCLUSIONS_YAML
            runtimeSecurity:
              enabled: true
            vulnerabilityScanning:
              enabled: true
            malwareScanning:
              enabled: true
            inventoryCollection:
              enabled: true
          EOF
          
          echo "Generated overrides.yaml:"
          cat overrides.yaml

      - name: Install Vision One Container Security with Helm
        run: |
          echo "Installing Vision One Container Security Helm chart"
          
          helm upgrade --install \
            trendmicro \
            --namespace trendmicro-system \
            --create-namespace \
            --values overrides.yaml \
            https://github.com/trendmicro/cloudone-container-security-helm/archive/master.tar.gz
          
          echo "✅ Helm install/upgrade completed"

      - name: Verify Deployment
        run: |
          echo "Verifying Vision One Container Security deployment"
          
          echo "Waiting for pods to be ready..."
          kubectl -n trendmicro-system wait --for=condition=Ready pods --all --timeout=300s || true
          
          echo "Current pods status:"
          kubectl -n trendmicro-system get pods
          
          # Check if essential pods are running
          RUNNING_PODS=$(kubectl -n trendmicro-system get pods -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | wc -w)
          
          if [ "$RUNNING_PODS" -gt 0 ]; then
            echo "✅ Vision One Container Security deployed successfully with $RUNNING_PODS running pods"
          else
            echo "⚠️ Some pods may not be running yet. Please check the pod status manually."
          fi

      - name: Wait for Vision One registration
        run: |
          echo "Waiting for cluster to be registered with Vision One (up to 5 minutes)..."
          MAX_ATTEMPTS=30  # 30 attempts * 10 seconds = 5 minutes
          
          for ((i=1; i<=$MAX_ATTEMPTS; i++)); do
            echo "Attempt $i of $MAX_ATTEMPTS..."
            sleep 10
            
            # Check if the cluster is registered in Vision One
            RESPONSE=$(curl -s -X GET "${V1CS_API_URL}/kubernetesClusters" \
              -H "Authorization: Bearer ${{ secrets.CONTAINER_SECURITY_API_KEY }}" \
              -H "Accept: application/json")
            
            # Debug the response
            echo "Checking API response format..."
            # Print a truncated version of the response for debugging
            echo "${RESPONSE:0:300}..."
            
            # Check if response is valid JSON
            if ! echo "$RESPONSE" | jq . >/dev/null 2>&1; then
              echo "⚠️ API response is not valid JSON. Retrying..."
              continue
            fi
            
            # Check for error response
            ERROR_CODE=$(echo "$RESPONSE" | jq -r '.responseCode // empty')
            ERROR_MSG=$(echo "$RESPONSE" | jq -r '.message // empty')
            
            if [[ -n "$ERROR_CODE" || -n "$ERROR_MSG" ]]; then
              echo "⚠️ API returned error: Code=$ERROR_CODE, Message=$ERROR_MSG"
              if [[ "$ERROR_CODE" == "401" ]]; then
                echo "Authentication failed. Please check your Vision One API key."
                break
              fi
              continue
            fi
            
            # Check if response has items array
            if ! echo "$RESPONSE" | jq -e '.items' >/dev/null 2>&1; then
              echo "⚠️ API response doesn't contain an 'items' array. Retrying..."
              continue
            fi
            
            # Convert cluster name to lowercase for case-insensitive comparison
            CLUSTER_NAME_LOWER=$(echo "$CLUSTER_NAME" | tr '[:upper:]' '[:lower:]')
            
            # Try to find the cluster by name
            echo "Checking for cluster with name '$CLUSTER_NAME' or '$CLUSTER_NAME_LOWER'..."
            FOUND_CLUSTERS=$(echo "$RESPONSE" | jq -r --arg name "$CLUSTER_NAME_LOWER" '.items[] | select(.name | ascii_downcase == $name or .name == "'$CLUSTER_NAME'") | .name' 2>/dev/null || echo "")
            
            if [[ -n "$FOUND_CLUSTERS" ]]; then
              echo "✅ Cluster registration detected in Vision One with name: $FOUND_CLUSTERS"
              break
            else
              echo "Cluster not found in current list. Waiting for registration to complete..."
            fi
            
            if [ $i -eq $MAX_ATTEMPTS ]; then
              echo "⚠️ Timeout waiting for cluster registration. It might still be in progress."
            fi
          done

      - name: Find Vision One Cluster ID
        id: find-cluster-id
        run: |
          echo "Looking up cluster ID in Vision One..."
          
          # Get list of clusters from Vision One
          RESPONSE=$(curl -s -X GET "${V1CS_API_URL}/kubernetesClusters" \
            -H "Authorization: Bearer ${{ secrets.CONTAINER_SECURITY_API_KEY }}" \
            -H "Accept: application/json")
          
          # Check if response is valid JSON
          if ! echo "$RESPONSE" | jq . >/dev/null 2>&1; then
            echo "::warning::API response is not valid JSON"
            echo "found=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for error response
          ERROR_CODE=$(echo "$RESPONSE" | jq -r '.responseCode // empty')
          ERROR_MSG=$(echo "$RESPONSE" | jq -r '.message // empty')
          
          if [[ -n "$ERROR_CODE" || -n "$ERROR_MSG" ]]; then
            echo "::warning::API returned error: Code=$ERROR_CODE, Message=$ERROR_MSG"
            echo "found=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if response has items array
          if ! echo "$RESPONSE" | jq -e '.items' >/dev/null 2>&1; then
            echo "::warning::API response doesn't contain an 'items' array"
            echo "found=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Convert cluster name to lowercase for case-insensitive comparison
          CLUSTER_NAME_LOWER=$(echo "$CLUSTER_NAME" | tr '[:upper:]' '[:lower:]')
          
          # Show all available clusters for troubleshooting
          echo "Available clusters in Vision One:"
          echo "$RESPONSE" | jq -r '.items[] | "- " + .name + " (ID: " + .id + ")"' || echo "None or unable to parse response"
          
          # Find the cluster with matching name
          CLUSTER_DATA=$(echo "$RESPONSE" | jq -r --arg name "$CLUSTER_NAME_LOWER" '.items[] | select(.name | ascii_downcase == $name or .name == "'$CLUSTER_NAME'")' 2>/dev/null || echo "")
          
          if [[ -n "$CLUSTER_DATA" ]]; then
            CLUSTER_ID=$(echo "$CLUSTER_DATA" | jq -r '.id')
            CLUSTER_DISPLAY_NAME=$(echo "$CLUSTER_DATA" | jq -r '.name')
            
            echo "Found cluster in Vision One: $CLUSTER_DISPLAY_NAME"
            echo "Cluster ID: $CLUSTER_ID"
            
            # Save to output
            echo "cluster_id=$CLUSTER_ID" >> $GITHUB_OUTPUT
            echo "cluster_name=$CLUSTER_DISPLAY_NAME" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "::warning::Cluster not found in Vision One. It may still be registering."
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Deployment Info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: overrides.yaml
          retention-days: 30

      - name: Job Summary
        run: |
          echo "## Vision One Container Security Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Target Environment" >> $GITHUB_STEP_SUMMARY
          echo "* **EKS Cluster**: $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
          echo "* **AWS Region**: $AWS_REGION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Vision One Configuration" >> $GITHUB_STEP_SUMMARY
          echo "* **Policy ID**: $V1CS_POLICY_ID" >> $GITHUB_STEP_SUMMARY
          echo "* **Group ID**: $V1CS_GROUP_ID" >> $GITHUB_STEP_SUMMARY
          echo "* **Excluded Namespaces**: $NAMESPACE_EXCLUSIONS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.find-cluster-id.outputs.found }}" == "true" ]]; then
            echo "### Vision One Registration" >> $GITHUB_STEP_SUMMARY
            echo "* **Cluster Name in Vision One**: ${{ steps.find-cluster-id.outputs.cluster_name }}" >> $GITHUB_STEP_SUMMARY
            echo "* **Cluster ID**: \`${{ steps.find-cluster-id.outputs.cluster_id }}\`" >> $GITHUB_STEP_SUMMARY
            echo "* **Status**: ✅ Successfully registered" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Vision One Registration" >> $GITHUB_STEP_SUMMARY
            echo "* **Status**: ⚠️ Cluster registration pending or not found" >> $GITHUB_STEP_SUMMARY
            echo "* **Note**: Registration may take several minutes to complete" >> $GITHUB_STEP_SUMMARY
            echo "* **Recommendation**: Check Vision One Container Security console manually" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "* **Secret Created**: ✅" >> $GITHUB_STEP_SUMMARY
          echo "* **Helm Chart Installed**: ✅" >> $GITHUB_STEP_SUMMARY
          echo "* **Deployment Completed**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To verify the deployment status, connect to your cluster and run:" >> $GITHUB_STEP_SUMMARY
          echo "```bash" >> $GITHUB_STEP_SUMMARY
          echo "kubectl -n trendmicro-system get pods" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.find-cluster-id.outputs.found }}" == "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### For Uninstallation" >> $GITHUB_STEP_SUMMARY
            echo "To uninstall this deployment, use the \"Uninstall Vision One Container Security\" workflow with these parameters:" >> $GITHUB_STEP_SUMMARY
            echo "- **EKS Cluster Name**: $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
            echo "- **AWS Region**: $AWS_REGION" >> $GITHUB_STEP_SUMMARY
            echo "- **Vision One Cluster ID**: \`${{ steps.find-cluster-id.outputs.cluster_id }}\`" >> $GITHUB_STEP_SUMMARY
          fi
